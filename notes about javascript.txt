|**************************************************************************|
| Files with this header are meant to be opened in a terminal. 			   |
| Use 'less + filename' to open it and look for reference. Each section	   |
| is separated by a line of asterisks. Andre Rodriguez. 2015.			   |
|**************************************************************************|

### NOTES ABOUT JAVASCRIPT

*************************************************************************
CHAPTER 1. ABC OF PROGRAMMING

What js can do to html:

- access the content of the page
- modify the content of the page
- program rules or instructions the browser can follow
- react to user events

reminder: BOTH HTML5 AND CSS3 HAVE NAMES AND VALUES

HTML = STRUCTURE
CSS = APPEARANCE

<p class="yourmom">what</p>

class = attribute name
yourmom = attribute value

.whatever {color:pink;}

.whatever = selector
color = name
pink = value

properties == attributes
events == instance that calls methods
objects == instances

how browsers render pages --> requests the html document --> creates a node (model stored in cache) --> requests for document to render it (css and js)

html       = STRUCTURE
css        = APPEARANCE
javascript = BEHAVIOR

javascript scripts go in the body! With the following syntax: 

<script src="javascript filename goes here.js"></script>

It's most of the times better to add the javascript scripts at the end of the body

COMMENTS = /* comment block goes here */
inline comment = // this is an inline comment


*************************************************************************
javascript has prototypes! you have to declare everything! also it has endlines --> ;

var quantity;
quantity = 3;

variable types in js = string, integer, boolean, null, array, undefined --| but no need to declare them !

*****************
let's take a look at this code:

var username;
var message;
username = 'Molly';
message = 'See our upcoming range';

var elName = document.getElementByld{'name');
elName .textContent = username;
var elNote = document .getElementByld( 'note');
elNote .textContent = message;

what i think it is:

First things are just plain variables.
4 last lines are this: first is a variable called elName (for element name) that is the documents method of get the element by id, and the html code
has the identifier of 'name' in the form so its easy to get it. Element is just the variable javascript makes to refer to the html document it is linked to.

then elNames variable textContent method is called to put molly in whatever was identified as name

escape character = '\'
variables in javascript contain html CODE! I call that cheating but whatevs it's cool yo BROOO MANG BUDDY HEY HEY HEY DUDE YOU YES YOU AHHHHHHHHHH

*************************************************************************

THIS WILL BLOW YOUR MIND:

/*JAVASCRIPT*/
var title;
var message;
title= "Molly's Special Offers" ;
message = '<a href=\"sale .html\">25% off l</a>' ;
var elTitle = document.getElementByld('title') ;
elTitle.innerHTML =title ;
var elNote = document.getElementByid ('note') ;
elNote.innerHTML =message

/*HTML*/
<hl>Elderflower</hl>
<div id="content">
<di v id=" t i t le">Special Offers</div>
<di v id="note">Sign-up to receive personalized
offers! </div>
</div>
<sc ri pt src="js/string-wi t h-quotes. j s"></script>

/*So, as you can see title and message are just plain variables with strings in them. What the code does next is
use the getElementById method (which is already coded for you) from the document reserved word and put it in eltitle and elnote.
After that it just says that the innerHTML method from the elNote variable (which is just the html element, that is referenced by an id attribute in the html code)is equal to the message string variable.*/

YOU can also declare and add value in the same line: "var elStock = document.getElementByld('stock');"

var inStock;
var shipping;
inStock = true;
shipping= false; 

var elStock = document.getElementByld('stock');
elStock.className = inStock;

var elShip = document.getElementByid('shipping');
elShip.className = shipping;

/* so what elStock really does is pass what is stored in inStock to the element selected with the id of stock in the HTML document. */

REMINDER: how to pass from int to string in javascript if datatype is not declared?

new =  constructor
so, array = [white, black, blue] is equal to saying => colors = new Array('white', 'blue', 'black') *** create a new array with these elements

you(me) can also get an element from an array with the item()
colors.length is a property take returns the len of the list

EXPRESIONS --> Can be single like var myVar = 'lel' or concatenated like 'beige' + 'beigeeeeee'

OPERATORS --> SAME AS IN PYTHON BUT && IS (AND) AND || IS (0R) AND INCREMENT IS ++ DECREMENT IS --

NOW LOOOK AT THIS MANG SERIOSULY THIS IS HJOW IT WORKS BRO BROO

var elShip = document.getElementByid('shipping') ;
elShip.textContent = shipping;

elShip it not really getting the string as variable, it's getting the POINTER DIRECTION, so whatever I assign as a variable later
is asigned to that pointer direction with points to the element inside the text that is a website located in a server! COOL HUH?

THE ONLY STRING OPERATOR IS +, no %r and %s regex bullshit or , commas!

If you try to concatenate a string and an integer then the integer gets converted to string and the result is a number with a digit on it

If there is an error concatenating, such as trying to multiply a string by a string, a value of NaN is returned (not a number)

*************************************************************************
CHAPTER 2. BASIC PROGRAMMING IN JAVASCRIPT

*************************************************************************
FUNCTIONS: (pretty retarded function if you ask me)

var msg = 'Sign up to receive our newsletter for 10% off!';
function updateMessage() {
var el = document.getElementByld('message'};
el .textContent = msg;
}
updateMessage(};

SO THE SYNTAX IS:

function sayHello() {
	document.write('hello');
}
function();

WITH PARAMETERS:

function getArea(width, length) {
	return width * length; 
}

function(3, 5)
	>> 15

RETURNING MORE THAN ONE VARIABLE WITH A LIST!

function getSize (width, height, depth) {
var area = width * height;
var volume = width * height * depth;
var sizes= [area , volume];
return sizes;

}
var areaOne = getSize (3, 2, 3)[0];
var volumeOne = getSize (3, 2, 3)[1];

### FUNCTION DECLARATION

function area (width, height )
return width * height;
}; 
var size = area(3, 4);

### FUNCTION EXPRESSION - LIKE A LAMBDA BUT STORED IN A VARIABLE -

var area = function(width, height ) {
return width * height;
} ;
var size= area(3, 4); 

INMEDIATELY INVOKED FUNCTION EXPRESSIONS (lambdas):

var area = (function() {
var width = 3;
var height = 2;
return width * height;
}()) ;

THE PARENTHESES BEFORE THE LAST CLOSING PARENTHESES TELL THE COMPILER TO INVOKE IT NAO

[If you forget to declare using VAR, then the variable becomes global]

THE MORE VARIABLES == THE SLOWER THE WEBSITE
a website can have more than 1 javascript file, if same variable names are used then conflicts will arise!

*************************************************************************
OBJECTS

variable = property 
function = method
variable name = key 
variable return = value

object and method syntax:

LITERAL NOTATION @@@@@@@@@@@@@@@@

var hotel {
	name: 'Rugal',
	rooms: '40',
	booked: '25',
	checkAvailability: function() {
		return this.rooms - this.booked;
	}
};

SEPARATE EVERYTHING BY COMMAS, PROPERTIES DONT NEED TO HAVE THE VAR DECLARATION, METHODS ARE EXPRESSIONS

objects elements are accessed by dot notation:

var hotelName = hotel.name; OR var hotelName = hotel['name']; --> list indexing 
var hotel.checkAvailability();

OBJECT STRUCTURE HOW TO ACCESS AND STUFFF *****

var hotel = {
	name: 'Quay',
	rooms : 40,
	booked : 25,
	checkAvailability: function() {
	return this.rooms - this.booked;
	}
};

var el Name = document .getElementByld('hotelName');
elName.textContent =hotel .name;

var elRooms = document.getElementByid{'rooms');
elRooms .textContent = hotel .checkAvailability();

--------------------------
CONSTRUCTOR NOTATION @@@@@@@@@@@@@@@@

var hotel = new Object();

hotel.name = 'Vega';
hotel.rooms = 40;
hotel.booked = 40;

hotel.checkAvailability = function() {
	return this.rooms - this.booked;
};

CREATING AN EMPTY OBJECT IN LITERAL NOTATION: 
var hotel = {} ***** NOT A DICTIONARY

@Updating an object property:

hotel.name = 'aleja';
hotel['name']  = 'kim';

@Deleting a property:

delete hotel.name;
or hotel.name = ''; --> to clear value

@INSTANTIATING MANY OBJECTS  ( THE PYTHON WAY )

Objects can use a function as a blueprint for objects:

function Hotel(name, rooms, booked) {
	this.name = name
	this.rooms = rooms
	this.booked = booked
	this.checkAvailability = function() {
		return this.rooms - this.booked;
	};
}   ---> blueprint !!!! it is a function

var kimHotel = new Hotel('Kim', 55, 30);  ---> instances!!!
var alejaHotel = new Hotel('Aleja', 53, 32);

------------------------------------------------------------

function Hotel (name, rooms, booked) {
	this.name = name;
	this.rooms = rooms;
	this.booked = booked;
	this.checkAvailability = function()
	return this.rooms - this.booked;
};

var quayHotel = new Hotel('Quay', 40, 25);
var parkHotel = new Hotel( ' Park', 120, 77);

var details1= quayHotel.name + ' rooms : ';
details1 += quayHotel.checkAvailability();
var elHotel1 = docurnent.getElementByid('hotel1');
elHotell.textContent =details!;

var details2 = parkHotel.name+ ' rooms: ';
details2 += parkHotel.checkAvailability();
var e1Hotel2 = document.getElementByid('hotel2');
elHotel2.textContent = details2;

DELETING A PROPERTY: delete hotel.booked;

@SO ITS JUST EITHER

var hotel = {} OR var hotel = new Object();

@@@THIS ---

var shape = {
	width = 600;
	length = 400;
	getArea = function() {
	return this.width * this.length
	} 

## [return this.width * this.length] is the same as saying [shape.width * shape.width] but since this is a blueprint for
many objects, this is used to refer to the new object.

USAGE:

LITERAL NOTATION WHEN: transmitting data between applications, global config objects
CONSTRUCTOR NOTATION WHEN: using more than one instance of the object, complex object that might not be used in code

*****A*AAAAAAAA*******

Arrays can hold objects and objects can hold arrays!

@@@ BUILT-IN OBJECTS

- Browser object model --> screen and history and that kinda thing
- Document object model --> really the objects you code
- Global javascript objects --> built-in modules like date and time

BROWSER OBJECT MODEL

window --> browser tab
	document --> current web page
	history --> pages in browser history
	location --> url of current page
	navigator --> info about browser
	screen --> devices display info

DOCUMENT OBJECT MODEL

                  |--> <head> - <title>
document --> html |
                  |--> <body> - <div> - <p> - text
                                  |
                              attribute  

GLOBAL JAVASCRIPT OBJECTS

basic data types ---> string - number - boolean

real world concepts --> date - math - regex

for instance -- checkout the window object's properties and methods, there are a lot.

LEARN STRING METHODS! none too many!

datatypes: string, number, boolean, undefined, null
complex: objects --> arrays and functions are objects

LEARN NUMBER(INT) METHODS!

RANDOMIZER IN JS!

random(): --> var randomNum = Math.floor((Math.random() * 10) + l); ## for a number between 1 and 10. Kinda like C++

LEARN GLOBAL OBJECTS! (date was one of them)

LOOK UP DATE AND TIME

date and time format: YYYY, MM, OD, HH, MM, SS

*************************************************************************
CHAPTER 3. DECISIONS AND LOOPS

ITS LIKE C++ WITH PYTHON SIMPLICITY

if (score > 50) {
	document.write('You Passed!');
} else {
	document.write('You Failed!');
}

THESE THINGS WITHOUT AND IF STATEMENT RETURN EITHER TRUE OR FALSE -> var hasPassed = score >= pass;

@OPERATORS 

== equal to
!= not equal to
=== strictly equal -> same value and same data type
!== strictly not equal -> viceversa
> greater than
< less than
>= greater or equal than
<= less or equal than
&& -> and
|| -> or 
! -> not

@@@ switch statements

switch (level) {
	case 'One':
		title = 'Level 1';
		break;
	case 'Two':
		title = 'Level 2';
		break;
	case 'Three':
		title = 'Level 3';
		break;
	default:
	title = 'Test';
	break;
}

-----

weak typing --> js's thing that allows it to transform datatypes, use === whenever possible to avoid NaN

falsy and truthy --> whatever is not true but is converted is falsy, whatvever is true true is truthy

If you use == the fo llowing values
can be considered equal:
false, 0, and ' ' (empty string).
However, they are not equivalent
when using the strict operators.

Although null and undefined are
both falsy, they are not equal to
anything other than themselves.
Again, they are not equivalent
when using strict operators.

Although NaN is considered falsy,
it is not equivalent to anything;
it is not even equivalent to itself
(since NaN is an undefinable
number, two cannot be equal).

(false == 0) true
(false === 0) false

if (this || that || there) {
	do something
}

passes if a value is given to any of those three variables, this can be used to triggers loop and control structures
and or trick

THE difference between while and do while is that do while always runs the code one time regardless of anything

FOR:
for (var i = 0; i < 10; i++) {
	document.write(i);
}

WHILE:
while (i < 10) {
msg += i + ' x 5 = ' + (i * 5) + '<br />';
i++;
}

DO..WHILE:
do 
{msg i += i 'x 5 = '+(i * 5) + '<br />';
i++;
} while (i < 1);
 
*************************************************************************
CHAPTER 3: THE DOCUMENT OBJECT MODEL

it's built-in every browser. It creates a model of the page in memory. Uses a DOM tree
to structure the page. The DOM tree is made of objects that represent a part of the webpage.

The DOM defines methods and properties to access those parts of the web page, which in turn
updates what the user sees in the browser. Some people call it API (Application programming interface) [the console]

ELEMENT --> names like div, header, p, ul, li (element nodes) --> attribute nodes (whatever you put in here) --> text nodes

WORKING WITH THE DOM TREE ---> 1. Locate the node you want to work with 2. use its content

Selecting an individual node **

getElementById() method --> by html id
querySelector() --> finds the first css selector

Selecting multiple elements (nodelists) **

getElementByClassName() --> selects an entire class
getElementsByTagName() --> selects elements with a tag name
querySelector all --> finds all css instances of that selector

Traversing between element nodes **

parentNode --> selects the element 
previousSibling / nextSibling --> selects the previous or next node in the dom tree
firstChild/ lastChild --> selects the first or last child of element

Caching DOM queries

Storing whatever you get from the method to get something from the DOM

var itemOne = getElementById("One"); YOU are caching the DOM Location not the variable! A pointer!!!

JavaScript can "display" data in different ways:

    Writing into an alert box, using window.alert().
    Writing into the HTML output using document.write().
    Writing into an HTML element, using innerHTML.
    Writing into the browser console, using console.log().

 