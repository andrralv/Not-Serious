**************************************************************************
Files with this header are meant to be opened in a terminal. 
Use 'less + filename' to open it and look for reference. Each section
is separated by a line of asterisks. Andre Rodriguez. 2015.
**************************************************************************

CHAPTER LIST

# 10. INTRODUCING CSS
# 11. COLOR
# 12. TEXT
# 13. BOXES
# 14. LISTS, TABLES AND FORMS

## notas de CSS

### CHAPTER 10 - INTRODUCING CSS
***************************************************************************
CSS is just specifications for blocks and inline html elements, which is why its necessary to specify everything.
p {font-family: Arial;}
where:
	* p is a selector
	{} are the brackets the code goes in
	font-family is the property
	Arial is the value
	; ends the line

^ All that is inside the curly brackets is a declaration
many elements can be selected with commas

h1, h2, h3 {font-family: Arial;
			color: yellow;}

^ each is separated outside and inside the brackets are wished
***************************************************************************
Linking the html to css ** External -- Uses the link element

	<head>
		 <title>Introducing CSS</title>
		 <link href="css/example.css" type="text/css"
			 rel="stylesheet" />
	</head>
***************************************************************************
You can link internally and externally, externally is as seen in the previous example, 
more than one css file can be used for different purposes.

Here is internal: -- Uses the style element

<!DOCTYPE html>
<html>
	 <head>
		 <title>Using Internal CSS</title>
		 <style type="text/css">
			 body {
					 font-family: arial;
					 background-color: rgb(185,179,175);}
			 h1 {
					 color: rgb(255,255,255);}
		 </style>
	 </head>
	 <body>
		 <h1>Potatoes</h1>
		 <p>There are dozens of different potato
			 varieties. They are usually described as
			 early, second early and maincrop.</p>
	 </body>
</html>

As a rule of thumb, only use internal if the site only has one index, use external otherwise.
***************************************************************************
There are different CSS Selectors  before the curly brackets, see page 238 of PDF for documentation.

* {} | all elements
h1, h2, h3 {} | these elements
element.class {} | anything that matches the class class
#introduction {} | anything with the id of introduction
li>a {} | matches anything indented in li
p a {} | any a element indented in p
h1+p {} | matches the first p element after an h1
h1~p {} | matches before and after p element of h1
***************************************************************************
Cascade rules:

if two selectors are identical, the last one will take priority *****

i {
	 color: green;}
i {
	 color: red;}

output is red

the selector that specifies more takes priority *****

* {
	 font-family: Arial, Verdana, sans-serif;}
h1 {
	 font-family: "Courier New", monospace;}

output is verdana

!important overrides everything

p b {
	 color: blue !important;}
p b {
	 color: violet;}

output is blue
***************************************************************************
Inheritance *** You can set to inherit the same value from father selectors

<div class="page">
	 <h1>Potatoes</h1>
	 <p>There are dozens of different potato
		 varieties.</p>
	 <p>They are usually described as early, second
		 early and maincrop potatoes.</p>
</div>
C SS
body {
	 font-family: Arial, Verdana, sans-serif;
	 color: #665544;
	 padding: 10px;}
.page {
	 border: 1px solid #665544;
	 background-color: #efefef;
	 padding: inherit;}
***************************************************************************
Use these sites to test how pages look in different browsers:
BrowserCam.com
BrowserLab.Adobe.com
BrowserShots.org
CrossBrowserTesting.com
**** If CSS bugs are found on browsers, these sites can help:
PositionIsEverything.net
QuirksMode.org
***************************************************************************

### CHAPTER 11 - COLOR

There are three ways of representing: rgb, hex and name (dont use name)
Foreground is just text color, example:

/* color name */
h1 {
	 color: DarkCyan;}
/* hex code */
h2 {
	 color: #ee3e80;}
/* rgb value */
p {
	 color: rgb(100,100,90);}
***************************************************************************

/* comments go here */ ---> commenting in css

Background color:

body {
	 background-color: rgb(blah blah blah);}
***************************************************************************

CSS3 enables opacity

p.one {
	 background-color: rgb(0,0,0);
	 opacity: 0.5;}
p.two {
	 background-color: rgb(0,0,0);
	 background-color: rgba(0,0,0,0.5);}

two ways --  1. using opacity property from 0.0 to 1.0 ---- 2. using rgba value

**************************************************************************
ccs3: hsl and hsla colors

hue -- 'color' --> value from 0 to 360, its a degree from a default color picker
saturation --> amount of gray -- 0 to 100%, 50% is normal
lightness -- 0% is black, %100 is white
alpha --> from 0.0 to 1.0 -- transparency

body {
	 background-color: #C8C8C8;
	 background-color: hsl(0,0%,78%);}
p {
	 background-color: #ffffff;
	 background-color: hsla(0,100%,100%,0.5);}

*** use both ways so that the latter takes priority, in case of older browsers


### CHAPTER 12 -- TEXT

There are two types of properties: those that edit the font itself and those that edit any text

types ot text/font: serif, sans-serif and monospace

- A font will only work if the user has it installed (but there is a work around)
- A font stack is setting a priority list of fonts

font-family --> the user has it on the computer   [-] limited choise [+] no licensing issue
font-face --> css specifies where the font can be downloaded if its not installed [-] user has to download the font [-] must be license approved
service-based-font-base --> commercial service fonts using@font-face [-] there is a fee [+] no downloading
images -- [+] anything goes [-] loading times [-] not 7600 lol
sifr --> font embedded into a flash movie and js replaces the html [-] user needs flash [+] widely permitted [?]
cufon --> javascript and svg version of text [-] users cant select text [-] not as widely used as sifr

-- font-family --

body {
	font-family: Georgia, Times, serif;} --> where Georgia is top priority, but times is there in case user doesnt have georgia
h1, h2 {
	font-family: Arial, Verdana, sans-serif;} -> where Arial is top priority, but Verdana is there in case user doesnt have arial

**************************************************************************

-- font-size -- three ways: pixels, percentage and ems

pixel -- most used
percentage -- if 16px for web is default, eveything scales using this as default
em -- equivalent to the length of the letter m of that font (this is retarded)

default is 16px/pt for body, and everything else scales to that

page 276 has a nice scaling sheet ****/-/**/*``*`*~~!**

@font-face -- only needs to be downloaded once ---

hapter-12/font-face.html
@font-face {
	 font-family: 'ChunkFiveRegular';
	 src: url('fonts/chunkfive.eot');}
h1, h2 {
	 font-family: ChunkFiveRegular, Georgia, serif;}

remember to use open source fonts and check the license, here are some free fonts:

www.fontsquirrel.com
www.fontex.org
www.openfontlibrary.org www.typekit.com
www.kernest.com
www.fontspring.com
www.google.com/webfonts

again, some browsers only accept some font formats, so theres a list"--
[this is a font format converter: www.fontsquirrel.com/fontface/generator]

this is the default priority list for formats: -->
1: eot
2: woff
3: ttf/otf
4: svg

example of a complicated code:

@font-face {
	 font-family: 'ChunkFiveRegular';
	 src: url('fonts/chunkfive.eot');
	 src: url('fonts/chunkfive.eot?#iefix')
	
	format('embedded-opentype'),
	
url('fonts/chunkfive.woff') format('woff'),
	
url('fonts/chunkfive.ttf')
				 format('truetype'),
	
url('fonts/chunkfive.svg#ChunkFiveRegular')
	
format('svg');}

**************************************************************************

bold --> .whatever {font-weight: bold-normal;}
italic --> .whatever {font-style: italic-oblique-normal;}
casing --> .whatever {font-transform: uppercase-lowercase-capitalize;}
decoration --> .whatever {text-decoration: -underline-overline-'line-through'-blink-none;} ** none is used to remove underline from links
leading --> .whatever {line-height: 1.4em;} ** increase or decrease vertical space between lines
spacing --> .whatever {letter-spacing: 0.2em, word-spacing: 1em;} letter-spacing --> 'kerning' 
alignment --> .whatever {text-align: right-left-justify-center;}
vertical-alignment --> .whatever {baseline-sub-super-top-'text-top'-middle-bottom-'text-bottom'} *or ems or percentage
*commonly used with inline elements e.g a text that goes around a picture
indentation --> .whatever {text-indent: 20px;} ** can also take negative values and push things out of the browser window
drop-shadow --> .whatever {text-shadow: 1px 1px 0px #000000;} 1. length to the left 2. length down 3. blur 4. color 
first-letter --> p.intro:first-letter {font-size: 200%;} *pseudo-element
first-line --> p.intro:first-line {font-weight: bold;} *pseudo-element
link-styling-'link' --> a:link {color: deeppink; text-decoration: none;}
link-styling-'visited'--> a:visited {color: black;} *pseudo-class
link-styling-'hover' --> a:hover {color: deeppink; text-decoration: underline;} *pseudo-class
link-styling-'active' --> a:active {color: darkcyan;} *pseudo-class [when you click it]
link-styling-'focus' --> input.text:focus {color: #665544;} [when you tab on it, for buttons]

attribute selectors: ***

[] --> p[class] targets any element in p with an attribute called class
[=] --> p[class=dog] targets any p element whose class value is dog
[~=] --> p[class~=dog] targets any p element whose class value is a list of space separated words and one is dog
[^=] --> p[attr^"d"] targets any element with an attribute whose value starts with d *wildcard
[*=] --> p[attr*"do"] targets any element with an attribute whose value has the letters 'do'
[$=] --> p[attr$"g"] targets any element with an attribute whose value ends with 'g'  

**************************************************************************

CHAPTER 13 -- BOXES

//// scaling ////

default --> scales to whatever is inside the box, but w and h can be set

div.box {
	 height: 300px;
	 width: 300px;
	 background-color: #bbbbaa;}
p {
	 height: 75%;
	 width: 75%;
	 background-color: #0088dd;}

~~ scales that div to 300x300, but the p inside it is 75% percent of it. -- Use percentages because of varying screen sizes

Width and Height can also be limited. So that text doesnt overflow off it

td.description {
	 min-width: 450px;
	 max-width: 650px;
	 text-align: left;
	 padding: 5px;
	 margin: 0px;}

h2, p {
	 width: 400px;
	 font-size: 90%;
	 line-height: 1.2em;}
h2 {
	 color: #0088dd;
	 border-bottom: 1px solid #0088dd;}
p {
	 min-height: 10px;
	 max-height: 30px;}

To adjust overflowing -- this can be used:

p.one {
	 overflow: hidden;}  --> hides whatever overflows
p.two {
	 overflow: scroll;}  --> adds a scroll button to see the rest

//// appearance ////

border - margin - padding

border-width ***
p.one {
	 border-width: 2px;}
p.two {
	 border-width: thick;} -- [thin-medium-thick]
p.three {
	 border-width: 1px 4px 12px 4px;} -- put values for each border side is valid to create 3d effect
[border-top-width
border-right-width
border-bottom-width
border-left-width] -- also works

border style ***
p.one {border-style: solid;}
p.two {border-style: dotted;}
p.three {border-style: dashed;}
p.four {border-style: double;}
p.five {border-style: groove;}
p.six {border-style: ridge;}
p.seven {border-style: inset;}
p.eight {border-style: outset;} ** you can also set each border side separately

**************************************************************************
border color ***
p.one {border-color: #0088dd;} --> can also change each side separately

you can also do it the property way -- set color border and width inmediately --> p {
	 width: 250px;
	 border: 3px dotted #0088dd;}

padding **

p.example {padding: 10px;}body {
	 text-align: center;}
p {
	 width: 300px;
	 padding: 50px;
	 border: 20px solid #0088dd;}
p.example {
	 margin: 10px auto 10px auto;
	 text-align: left;}

margin ** --> distance between boxes, can also be set each side separately

p.example {margin: 20px;}

aligning--centering **

body {
	 text-align: center;}
p {
	 width: 300px;
	 padding: 50px;
	 border: 20px solid #0088dd;}
p.example {
	 margin: 10px auto 10px auto;
	 text-align: left;}

auto property for left and right puts it right to the center #

*#*# careful with IE6 because has a different property for padding and margins, use a doctype whenever possible

inline display ** takes a vertical object and transforms it into horizontal, like lists 
inline --> default | block --> makes it act like a block | inline-block --> mashup of both | none --> hides the object from display!

li {
	 display: inline;
	 margin-right: 10px;}
li.coming-soon {
	 display: none;}

visibility **

hides an object but leaves an space where it shoulda been [values= hidden-visible]

li {
	 display: inline;
	 margin-right: 10px;}
li.coming-soon {
	 visibility: hidden;}

**************************************************************************
CSS3 STUFFS! -~-~-~-~-~-~-~-

border images * Takes a pic and slices it into 9 pieces. -Corners and sides.

p.one {
	 -moz-border-image: url("images/dots.gif")
		 11 11 11 11 stretch;
	 -webkit-border-image: url("images/dots.gif")
		 11 11 11 11 stretch;
	 border-image: url("images/dots.gif")
		 11 11 11 11 stretch;}

box shadows * ads drop shadow to the box --> values -> horizontal offset, vertical offset, blur distance, spread of shadow

p.one {
	 -moz-box-shadow: -5px -5px #777777;
	 -webkit-box-shadow: -5px -5px #777777;
	 box-shadow: -5px -5px #777777;}

round corners * ads round corners to the box, what else // can also specify for each corner but this is useless IMO

p{
border: 5px solid #cccccc;
padding: 20px;
width: 275px;
text-align: center;
border-radius: 10px;
-moz-border-radius: 10px;
-webkit-border-radius: 10px;} 	 

eliptical shapes * this is weird but okay, its like the alt key on illustrator selecting a path

p.one {
	 border-top-left-radius: 80px 50px;
	 -moz-border-radius-top-left: 80px 50px;
	 -webkit-border-radius-top-left: 80px 50px;}
p.two {
	 border-radius: 1em 4em 1em 4em / 2em 1em 2em 1em;
	 -moz-border-radius: 1em 4em 1em 4em
		 / 2em 1em 2em 1em;
	 -webkit-border-radius: 1em 4em 1em 4em
		 / 2em 1em 2em 1em;}
p.three {
	 padding: 0px;
	 border-radius: 100px;
	 -moz-border-radius: 100px;
	 -webkit-border-radius: 100px;}

**************************************************************************

### CHAPTER 14 - LISTS, TABLES AND FORMS

Bullet-point styles --> known as marker --> used on <ol>, <ul> and <li> elements

for unordered [values] --> none, disc, square, circle
for ordered lists [values] --> decimal, 'decimal-leading-zero', lower-alpha, upper-alpha, lower-roman, upper-roman

images for bullets
ul {
	 list-style-image: url("images/star.png");}
li {
	 margin: 10px 0px 0px 0px;}

** positioning the marker --

ul {
	 width: 150px;}
li {
	 margin: 10px;}
ul.illuminations {
	 list-style-position: outside;}
ul.season {
	 list-style-position: inside;}

outside is default -- the list is 'justified' in a way so to speak
inside includes the bullet point into the block of text

shorthand for there properties --> 

ul {
	 list-style: inside circle;
	 width: 300px;}
li {
	 margin: 10px 0px 0px 0px;}

**************************************************************************

more properties --*-*

width --> x{width: 600px;} -- set width of the table
padding --> x{padding:100px;}sets space between each table cell
text-transform --> x{text-transform:uppercase} transforms the casing -- upper, lower, caps
letter-spacing, font-size --> x{letter-spacing:0,1em, font-size:16em;} 
border-top, bottom --> x{border-bottom: 2px solid #111111;} 
text-align --> x{text-align:right;} aligns text somewhere
background-color --> x{background-color:red;} -- change the cell to another color
:hover --> tr:hover {background-color: #c3e6e5;} -- property so that it changes color on hover

borders for empty cells [dif browsers treat empty cells separately]
show--> shows borders
hide--> hides borders
inherit--> inherits if nested table

td {
	 border: 1px solid #0088dd;
	 padding: 15px;}
table.one {
	 empty-cells: show;}
table.two {
	 empty-cells: hide;}

gap between cells 

a gap is default, if cells have borders then they become annoying, use collapse in this instance

td {
	 background-color: #0088dd;
	 padding: 15px;
	 border: 2px solid #000000;}
table.one {
	 border-spacing: 5px 15px;}
table.two {
	 border-collapse: collapse;}


**************************************************************************
Forms -- editable things --> text input, submit buttons, labels on form (alignment)

it is difficult to make form buttons consistent across browsers, this guy got it right --> http://formalize.me.

Input --> font-size, color, background-color, border, border-radius(makes round corners), :focus, background-image

input {
	 font-size: 120%;
	 color: #5a5854;
	 background-color: #f2f2f2;
	 border: 1px solid #bdbdbd;
	 border-radius: 5px;
	 padding: 5px 5px 5px 30px;
	 background-repeat: no-repeat;
	 background-position: 8px 9px;
	 display: block;
	 margin-bottom: 10px;}
input:focus {
	 background-color: #ffffff;
	 border: 1px solid #b1e1e4;}
input#email {
	 background-image: url("images/email.png");}
input#twitter {
	 background-image: url("images/twitter.png");}
input#web {
	 background-image: url("images/web.png");}

Submit buttons --> color, text-shadow, border-bottom, background-color, :hover

** this uses gradients !!! (will be covered later)

input#submit {
	 color: #444444;
	 text-shadow: 0px 1px 1px #ffffff;
	 border-bottom: 2px solid #b2b2b2;
	 background-color: #b9e4e3;
	 background: -webkit-gradient(linear, left top,
		 left bottom, from(#beeae9), to(#a8cfce));
	 background:
		 -moz-linear-gradient(top, #beeae9, #a8cfce);
	 background:
		 -o-linear-gradient(top, #beeae9, #a8cfce);
	 background:
		 -ms-linear-gradient(top, #beeae9, #a8cfce);}
input#submit:hover {
	 color: #333333;
	 border: 1px solid #a4a4a4;
	 border-top: 2px solid #b2b2b2;
	 background-color: #a0dbc4;
	 background: -webkit-gradient(linear, left top,
		 left bottom, from(#a8cfce), to(#beeae9));
	 background:
		 -moz-linear-gradient(top, #a8cfce, #beeae9);
	 background:
		 -o-linear-gradient(top, #a8cfce, #beeae9);
	 background:
		 -ms-linear-gradient(top, #a8cfce, #beeae9);}

Fieldsets And Legends --> width, color, background-color, border, border-radius, padding

fieldset {
	 width: 350px;
	 border: 1px solid #dcdcdc;
	 border-radius: 10px;
	 padding: 20px;
	 text-align: right;}
legend {
	 background-color: #efefef;
	 border: 1px solid #dcdcdc;
	 border-radius: 10px;
	 padding: 10px 20px;
	 text-align: left;
	 text-transform: uppercase;}


****// aligning things in forms is a pain in the bellybutton, which is why it is good practice to put everything separate
in div elements with a class or id to edit later //****

float --> moves elements across page, kinda like padding
use width to make elements one consistant length
use text-align and padding to move text to the side

**************************************************************///////

example of a fixed form:

<form action="example.php" method="post">
	 <div>
		 <label for="name" class="title">Name:</label>
		 <input type="text" id="name" name="name" />
	 </div>
	 <div>
		 <label for="email" class="title">Email:</label>
		 <input type="email" id="email" name="email" />
	 </div>
	 <div>
		 <span class="title">Gender:</span>
		 <input type="radio" name="gender" id="male"
			 value="M" />
		 <label for="male">Male</label>
		 <input type="radio" name="gender" id="female"
			 value="F" />
		 <label for="female">Female</label><br />
	 </div>
	 <div>
		 <input type="submit" value="Register"
			 id="submit" />
	 </div>
</form>

**************************************************************///////

div {
	 border-bottom: 1px solid #efefef;
	 margin: 10px;
	 padding-bottom: 10px;
	 width: 260px;}
.title {
	 float: left;
	 width: 100px;
	 text-align: right;
	 padding-right: 10px;}
.radio-buttons label {
	 float: none;}
.submit {
	 text-align: right;}

**************************************************************///////	 

cursor style -- values: auto, crosshair, default, pointer, move, text, wait, help, url("cursor.gif")

<a href="http://www.whitmanarchive.org">
	 Walt Whitman</a>

a {
	 cursor: move;}

TIP: USE A COOL INSPECTOR FOR HTML5/CSS3 AS A FIREFOX EXTENSION AT
www.chrispederick.co

**************************************************************************

CHAPTER 14 -- LAYOUT

blocks --> h1, p, li, ul
inline --> img, b, i

if a block has another block inside then this one is a parent block

CSS positioning schemes --

normal flow --> the page goes down with each block, they dont sit besides one another
relative positioning --> moves things from normal position to the sides and up and down
absolute positioning --> things can sit on top of each other, it is up to the designer to arrange them
fixed positioning --> things sit on top of each other but the position is relative to the browser and not to containment element
floating elements --> normal flow but can move things to the far right or left

z-index property --> bring to front or back - like - in illustrator property

**** normal flow -- position:static

**** relative positioning -- position:relative

p.example {
	 position: relative;
	 top: 10px;
	 left: 100px;}

**** absolute positioning -- position:absolute

h1 {
	 position: absolute;
	 top: 0px;
	 left: 500px;
	 width: 250px;}
p {
	 width: 450px;}

**** fixed positioning --position:fixed ---> pretty good to get a top menu going while the rest moves

h1 {
	 position: fixed;
	 top: 0px;
	 left: 50px;
	 padding: 10px;
	 margin: 0px;
	 width: 100%;
	 background-color: #efefef;}
p.example {
	 margin-top: 100px;}

**** overlapping elements ---> bringing overlapping things to front -- the higher the number the more on top if it
(its a priority order)

h1 {
	 position: fixed;
	 top: 0px;
	 left: 0px;
	 margin: 0px;
	 padding: 10px;
	 width: 100%;
	 background-color: #efefef;
	 z-index: 10;}
p {
	 position: relative;
	 top: 70px;
	 left: 70px;}

**** floating elements --float:right-or-left ---> puts something far to a side and the rest flows around it

blockquote {
		float: right;
		width: 275px;
		font-size: 130%;
		font-style: italic;
		font-family: Georgia, Times, serif;
		margin: 0px 0px 10px 10px;
		padding: 10px;
		border-top: 1px solid #665544;
		border-bottom: 1px solid #665544;}

	-/-/-/-/- putting elements side by side -/-/-/-/- ** the dimensions of the boxes can affect the position
	
body {
	 width: 750px;
	 font-family: Arial, Verdana, sans-serif;
	 color: #665544;}
p {
	 width: 230px;
	 float: left;
	 margin: 5px;
	 padding: 5px;
	 background-color: #efefef;} 	

workaround --> clear -- special property *

used with class, orders it not to touch adjacent boxes. Takes: left, right, both, none

THERE IS A PROBLEM THO -- sometimes borders and stuff gets cut in floated elements

FIX --> Put it isolated in a div and give it a width of 100 and overflow to auto

div {
	 border: 1px solid #665544;
	 overflow: auto;
	 width: 100%;}

Multi-column layouts --> sites that consist of columns
They are div elements with given properties -- width, float and margin
This example uses a main block and a sidebar

.column1of2 {
	 float: left;
	 width: 620px;
	 margin: 10px;}
.column2of2 {
	 float: left;
	 width: 300px;
	 margin: 10px;}

**************************************************************************

SCREEN SIZES */*/ there are way too many mang

Most sites are by default 960-1000 pixels wide, 600 for what users see without scrolling. Don't milk it son.

Fixed width layouts --> everything stays in place, consistent, accurate
BUT [text can look small if the res is too high, if the user increases font size, bad things happen, too vertical]

To make a fixed width layout just use pixels at all times and many div elements for different classes. Example:

body {
	 width: 960px;
	 margin: 0 auto;}
#content {
	 overflow: auto;
	 height: 100%;}
#nav, #feature, #footer {
	 background-color: #efefef;
	 padding: 10px;
	 margin: 10px;}
.column1, .column2, .column3 {
	 background-color: #efefef;
	 width: 300px;
	 float: left;
	 margin: 10px;}
li {
	 display: inline;
	 padding: 5px;}

Liquid layouts --> increases and decreases as the user changes size, uses percentages, no scrolling to the side, things stretch out. 
BUT [harder to code, super large lines of text on wide screens, squashed lines of text on narrow screens, imgs can overflow on small boxes]

Just use percentages relative to a scale and be consistent on that. Example:

body {
	 width: 90%;
	 margin: 0 auto;}
#content {overflow: auto;}
#nav, #feature, #footer {
	 margin: 1%;}
.column1, .column2, .column3 {
	 width: 31.3%;
	 float: left;
	 margin: 1%;}
.column3 {margin-right: 0%;}
li {
	 display: inline;
	 padding: 0.5em;}
#nav, #footer {
	 background-color: #efefef;
	 padding: 0.5em 0;}
#feature, .article {
	 height: 10em;
	 margin-bottom: 1em;
	 background-color: #efefef;}

**************************************************************************

## LAYOUT GRIDS 

These are just frameworks that have CSS classes you can refer to in your html code to get a basic thing going, like columns
and stuff. You can get multiple sheets going to get the layout from the framework and the rest from your own CSS file.

960 pixel grid --> Used by designers. 
+ Creates continuity between pages of a single website
+ Helps users predict where to find specific information
+ Makes it easier to add new content to the site
+ Helps people collab on a design

FRAMEWORKS [960.gs]

+ Not reinventing the wheel
+ Tested on many browsers
+ Save code
- My html code with have class names to match the css that dont have nuttin to do with muh content
- Has too much bloat code

[other frameworks:] 
blueprintcss.org/
lessframework.com/
developer.yahoo.com/yui/grids/
wordpress.com/

MULTIPLE SHEETS --@

FIRST WAY OF DOING IT --

Just use a regular html structure linking to a css file
Have that css file import other CSS files using the @import statement
Example in CSS file --> @import url("tables.css");

SECOND WAY OF DOING IT --

Just put more than one link to CSS files in the HTML, rules of precedence still apply.

**************************************************************************

### CHAPTER 16 - IMAGES

Rules of the pictar:

- Bee urself
- Be consistent
- Specify dimensions so the browser knows where to render
- Use known dimensions, such as:
Small portrait: 220 x 360
Small landscape: 330 x 210
Feature photo: 620 x 400
- Know when to use .gif, .png, .jpg
- Use classes to identify the pictures

*** Dimensions, self explanatory:

<img src="images/magnolia-small.jpg"
class="small" alt="Magnolia" />

img.small {
	 width: 100px;
	 height: 100px;}

*** Aligning Pictures -- use the float property instead of html align.

img.align-left {
	 float: left;
	 margin-right: 10px;}
img.align-right	{
	 float: right;
	 margin-left: 10px;}
img.medium {
	 width: 250px;
	 height: 250px;}

** Centering pictures -- since pics are inline by default, you have to transform them to blocks to do this

two ways --> set align-center, or auto on both sides of margin property

img.align-center {
	 display: block;
	 margin: 0px auto;}
img.medium {
	 width: 250px;
	 height: 250px;}
*use <figure> for more html5 eyecandy-code

**************************************************************************

Background images --> they repeat by default, dont need to take the whole page necessarily

body {
	 background-image: url("images/pattern.gif");} --> repeating a pattern

can also put background to other elements:

p	{
	 background-image: url("images/pattern.gif");}

*** background-repeat --> [values] repeat, repeat-x, repeat-y, no-repeat --> [fixed or scroll]

body {
	 background-image: url("images/tulip.gif");
	 background-repeat: no-repeat;
	 background-attachment: fixed;}

*** background-position --> left top, left center, left bottom, center top, etc..., right top, etc...
[can also use percentages or pixels]

body {
	 background-image: url("images/tulip.gif");
	 background-repeat: no-repeat;
	 background-position: 50% 50%;}

*** shorthand - background

body {
	 background: #ffffff url("images/tulip.gif")
		 no-repeat top right;}

1: background-color
2: background-image
3: background-repeat
4: background-attachment
5: background-position

**************************************************************************

*** rollovers

-- have a picture change to another one when the user hovers, then to another when the user clicks
-- sprites are a set of pictures framed in sequence, like a gif, makes loading faster
-- its usually just two or three background pictures in the same space

<a class="button" id="add-to-basket">
Add to basket</a>
<a class="button" id="framing-options">
Framing options</a>

a.button {
	 height: 36px;
	 background-image: url("images/button-sprite.jpg");
	 text-indent: -9999px;
	 display: inline-block;}
a#add-to-basket {
	 width: 174px;
	 background-position: 0px 0px;}
a#framing-options {
	 width: 210px;
	 background-position: -175px 0px;}
a#add-to-basket:hover {
	 background-position: 0px -40px;}
a#framing-options:hover {
	 background-position: -175px -40px;}
a#add-to-basket:active {
	 background-position: 0px -80px;}
a#framing-options:active {
	 background-position: -175px -80px;}

CSS3: gradients --* You already know how it goes right -- settings for diff browsers

#gradient {
	 /* fallback color */
	 background-color: #66cccc;
	 /* fallback image */
	 background-image: url(images/fallback-image.png);
	 /* Firefox 3.6+ */
	 background-image: -moz-linear-gradient(#336666,
		 #66cccc);
	 /* Safari 4+, Chrome 1+ */
	 background-image: -webkit-gradient(linear, 0% 0%,
		 0% 100%, from(#66cccc), to(#336666));
	 /* Safari 5.1+, Chrome 10+ */
	 background-image: -webkit-linear-gradient(#336666,
		 #66cccc);
	 /* Opera 11.10+ */
	 background-image: -o-linear-gradient(#336666,
		 #66cccc);
	 height: 150px;
	 width: 300px;}


**************************************************************************
### END OF FILE ###

