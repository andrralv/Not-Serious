|**************************************************************************|
| Files with this header are meant to be opened in a terminal. 			   |
| Use 'less + filename' to open it and look for reference. Each section	   |
| is separated by a line of asterisks. Andre Rodriguez. 2015.			   |
|**************************************************************************|

### NOTES ABOUT SASS

first basics of what it is. It's basically setting properties to variables:

$brand-color: #fc3;
a {
color: $brand-color;
}
nav {
background-color: $brand-color;
}

*********-**********

p {
margin-bottom: 20px;
font-size: 14px;
line-height: 1.5;
}
footer {
margin-bottom: 20px;
font-size: 14px;
line-height: 1.5;
}

*** transforms to:

@mixin default-type {
margin-bottom: 20px;
font-size: 14px;
line-height: 1.5;
}
p {
@include default-type;
}
footer {
@include default-type;
}

DRY: Don't repeat yourself. That's the point of SASS.
Sass is a CSS preprocessor—a layer between the stylesheets you
author and the .css files you serve to the browser. Sass (short
for Syntactically Awesome Stylesheets) plugs the holes in CSS
as a language, allowing you to write DRY code that’ll be faster,
more efficient, and easier to maintain.

So while normal CSS doesn’t yet allow things like variables,
mixins (reusable blocks of styles), and other goodies, Sass pro-
vides a syntax that does all of that and more—enabling “super
functionality” in addition to your normal CSS. It then trans-
lates (or compiles) that syntax into regular ol’ CSS files via a
command-line program or web-framework plugin.

SASS file extensions are .scss then transformed to .css

**********---*********** another example:

$pink: #ea4c89;
p {
font-size: 12px;
color: $pink;
}
p strong {
text-transform: uppercase;
}

will compile to:

p {
font-size: 12px;
color: #ea4c89;
}
p strong {
text-transform: uppercase;
}

can also be turnt into pythonesque style, which sucks:

$pink: #ea4c89
p
	font-size: 12px
	color: $pink
p strong
	text-transform: uppercase

Okay. We’ve installed Sass, so now what? We need to tell Sass
which files to “watch.” Meaning, while we’re editing a stylesheet,
we want Sass to monitor that file and convert the .scss file with
all our nifty Sass syntax to the browser-ready .css file every time
we make changes. There are a few ways to do this:

-> an app
-> command line

first command (init)

$ sass --watch screen.scss:screen.css

After you run the above command, Sass will start monitoring
any changes made to screen.scss . You’ll see this message in the
terminal after hitting return: 'waiting for whatever'

so it gets screen.scss and any changes it puts it to screen.css ### pretty cool huh?

You can also tell Sass to watch an entire directory, rather
than just a single stylesheet. So using the above file structure, I
could use the following watch command to monitor changes on
any of the .scss files in my project (provided I’m currently in
the -/ directory that holds my stylesheets and images in the
terminal):

$ sass --watch stylesheets/sass:stylesheets

output styles --> how it looks after the conversion

nested(default) -- uses indentation, uses curly brackets
expanded -- not nested, c++ like, with spaces, uses curly brackets [use this one]

here's how to use it: $ sass --watch --style expanded screen.scss:screen.css

compact -- everything is one liners, cool looking but difficult to read
compressed -- removes all spaces and new lines ** use only for super long sheets

warning: never update the css file from now on, do everything on the scss file

**************************************************************************
NESTING

example of not repeating yourself:

header[role="banner"] {
margin: 20px 0 30px 0;
border-bottom: 4px solid #333;

#logo {
float: left;
margin: 0 20px 0 0;

	img {
		display: block;
		opacity: .95;
		}
	}

## compiles to: (because of indentation!)

header[role="banner"] {
margin: 20px 0 30px 0;
border-bottom: 4px solid #333;
}
header[role="banner"] #logo {
float: left;
margin: 0 20px 0 0;
}
header[role="banner"] #logo img {
display: block;
opacity: .95;
}

It's also possible to select an elements properties without retyping it with double dot

text: {
transform: uppercase;
decoration: underline;
align: center;
}

to avoid text-transform: blah, text-align: blah . . .

referencing parent selector with ampersand:

a {
	font-weight: bold;
	text-decoration: none;
	color: red;
	border-bottom: 2px solid red;
	&:hover {
		color: maroon;
		border-color: maroon;
	}
}

compiles to:

a {
	font-weight: bold;
	text-decoration: none;
	color: red;
	border-bottom: 2px solid red;
}
	a:hover {
	color: maroon;
	border-color: maroon;
}

another example: ****** -- alert is a class

li a {
	color: blue;
	&.alert {
		color: red;
		}
	&.success {
		color: green;
	}
}

compiles to: ******  

li a {
	color: blue;
	}
li a.alert {
	color: red;
	}
li a.success {
	color: green;
	}

another example on parent selector:

section.main p {
	margin: 0 0 20px 0;
	font-size: 18px;
	line-height: 1.5;

	body.store & {
		font-size: 16px;
		line-height: 1.4;
	}
}

compiles to:

section.main p {
	margin: 0 0 20px 0;
	font-size: 18px;
	line-height: 1.5;
}

body.store section.main p {
	font-size: 16px;
	line-height: 1.4;
}

/* hi */ --> regular css comment
/*! hey */ --> important scss comment
// --> single line comment


**************************************************************************
VARIABLES @@@@@

$ --> define variable

$color-main: #333;
$color-light: #999;
$color-accent: #ea4c89;

$font-sans: "Proxima Nova", "Helvetica Neue", »
Helvetica, Arial, sans-serif;
$font-serif: Jubilat, Georgia, serif;

body {
padding: 0 8%;
font-family: $font-sans;
font-size: 100%;
color: $color-main;
background: #fff url(../img/bg.jpg) repeat-x -80% 0;
}

compiles to ---*****:

body {
padding: 0 8%;
font-family: "Proxima Nova", "Helvetica Neue", »
Helvetica, Arial, sans-serif;
font-size: 100%;
color: #333;
background: #fff url(../img/bg.jpg) repeat-x -80% 0;
}

PICK THE PALLETE COLORS BEFOREHAND CREATING THE SITE
USE KULER

!!!!*****

darken/lighten feature in sass:

section.secondary {
background: darken($color-accent, 30%);
}

MIXINS @@@@@

Let’s move on to my second favorite Sass feature: mixins.
Where variables let you define and reuse values throughout
the stylesheet, mixins allow you to define and reuse blocks of
styles. 
Rather than typing the same rules over and over again
in various declarations, you can use mixins to define a group of
styles just once and refer to it anytime those styles are needed.

@mixin title-style {
margin: 0 0 20px 0;
font-family: $font-serif;
font-size: 20px;
font-weight: bold;
text-transform: uppercase;
}

Once it’s defined, we can now refer to this mixin anywhere
we’d like to insert those styles by using the @include directive.
On the Sasquatch site, we have a section of the stylesheet that
defines rules for the page’s main section, and we want the mixin
to style all <h2> elements:

section.main h2 {	
	@include title-style;
}

this will compile to:

section.main h2 {
margin: 0 0 20px 0;
font-family: Jubilat, Georgia, serif;
font-size: 20px;
font-weight: bold;
text-transform: uppercase;
}

section.secondary h3 {	
@include title-style;
}

This lets us avoid duplicating the shared styles—or adding a
class to the markup that both headings could theoretically share.

** you can add more stuff to the new mixin. It's a child class with new methods!!

MIXINS AS FUNCTIONS !!!

@mixin title-style($color) {
	margin: 0 0 20px 0;
	font-family: $font-serif;
	font-size: 20px;
	font-weight: bold;
	text-transform: uppercase;
	color: $color;
}

section.main h2 {	
	@include title-style(#c63);
}

Transforms color to orange!

Also multiple arguments are valid:

@mixin title-style($color, $background) {
	margin: 0 0 20px 0;
	font-family: $font-serif;
	font-size: 20px;
	font-weight: bold;
	text-transform: uppercase;
	color: $color;
	background: $background;
}

section.main h2 {	
	@include title-style(#c63, #eee);
}
	section.secondary h3 {	
		@include title-style(#39c, #333);
	}

See why it works? Style multiple things with this at once. Arguments can also hae default values:

@mixin title-style($color: blue, $background: green) {
	margin: 0 0 20px 0;
	font-family: $font-serif;
	font-size: 20px;
	font-weight: bold;
	text-transform: uppercase;
	color: $color;
	background: $background;
}

And if we want the color to be the default blue, but we want
to override the background to be pink, we only need to pass
the background:

section.main h2 {	
	@include title-style($background: pink);

	REUSE CODE WHENEVER POSSIBLE

USE THIS MIXIN FOR GRADIENTS:

@mixin linear-gradient($from, $to) {
/* Fallback for sad browsers */
background-color: $to;
/* Mozilla Firefox */
background-image:
-moz-linear-gradient($from, $to);
/* Opera */
background-image:
-o-linear-gradient($from, $to);
/* WebKit (Safari 4+, Chrome 1+) */
background-image:
-webkit-gradient(linear, »
left top, left bottom, color-stop(0, $from), »
color-stop(1, $to));
/* WebKit (Chrome 11+) */
background-image: -webkit-linear-gradient($from, $to);
/* IE10 */
background-image:
-ms-linear-gradient($from, $to);
/* W3C */
background-image:
linear-gradient($from, $to);
}

**************************************************************************

@import -- "LIKE A PYTHON MODULE"
import at the beginning of the file - mixins, variables, etc, when it 
compiles it compiles everything 

!- COMPASS MODULE -! - Its like a module but set by diferent defaults made by some dude

@extend -- basically variable for a block

.alert {
	padding: 15px;
	font-size: 1.2em;
	font-weight: normal;
	text-transform: uppercase;
	line-height: 1;
	letter-spacing: 3px;
	text-align: center;
	color: #fff;
	background: $color-accent;	
	@include shadow(0, 1px, 2px, rgba(0,0,0,.5));
	@include rounded(10px);
}

.alert-positive {
	background: #9c3;
}

alert-positive {
	@extend .alert;
	background: #9c3;
}

Instead of littering the markup with extra classes to handle
those small exceptions, we can use Sass’s @extend function to
“chain together” styles that are shared amongst multiple selec-
tors.

.alert {
padding: 15px;
font-size: 1.2em;
text-align: center;
background: $color-accent;
}
.important {
font-size: 4em;
}
.alert-positive {
@extend .alert;
@extend .important;
background: #9c3;
}

**************************************************************************

PLACEHOLDER OR EMPTY EXTENDER
Button wont appear in the output, its just show for buy and submit, used in frameworks

%button {
	padding: 10px;
	font-weight: bold;
	background: blue;
	border-radius: 6px;
	}

.buy {
	@extend %button;
}

.submit {
	@extend %button;
	background: green;
}

@extend versus @mixin
Where a mixin will write the same rules in each declaration
it’s called from, @extend will create multiple, comma-separated
selectors for shared styles. It’s good to keep that difference in
mind when you’re debating which to use.
For example, overuse of a mixin can result in a bloated CSS
file in which the contents of the mixin are present in the com-
piled CSS every time it’s called in Sass. If you find yourself using
a mixin over and over throughout the stylesheet, keep in mind
how that will compile, and consider whether it makes sense to
use @extend or turn those repeated styles into a class that gets
reused in the markup instead.

Don’t over @extend yourself
Using @extend is a powerful way to share styles between classes,
but be careful; when used too much, the compiled CSS starts to
get a bit hairy. Extending the same class repeatedly throughout
the stylesheet can result in a monster declaration.

THAT IT DOE

**************************************************************************

SASS AND MEDIA QUERIES

USING COMPASS:

$ cd /path/to/project
$ compass watch

$ compass compile --production

